"""
Simple Haystack RAG Pipeline
Theo documentation ch√≠nh th·ª©c c·ªßa Haystack
"""

import logging
from typing import Dict, Any, List, Optional

logger = logging.getLogger(__name__)

try:
    # Import Haystack components theo documentation
    from haystack import Pipeline
    from haystack.document_stores import InMemoryDocumentStore
    from haystack.nodes import EmbeddingRetriever, PromptNode, PromptTemplate
    from haystack.schema import Document
    
    HAYSTACK_AVAILABLE = True
    logger.info("‚úÖ Simple Haystack pipeline enabled")
except Exception as e:
    HAYSTACK_AVAILABLE = False
    logger.error(f"‚ùå Simple Haystack pipeline failed: {e}")

from config import config


class SimpleHaystackPipeline:
    """
    Simple Haystack RAG Pipeline
    Theo documentation ch√≠nh th·ª©c
    """
    
    def __init__(self):
        if not HAYSTACK_AVAILABLE:
            raise ImportError("Haystack not available")
        
        self._init_haystack()
        logger.info("üéØ Simple Haystack pipeline initialized")
    
    def _init_haystack(self):
        """Initialize Haystack theo documentation"""
        try:
            # Document store
            self.document_store = InMemoryDocumentStore(
                embedding_dim=config.models.embedding_dimension, 
                similarity="cosine"
            )

            # Retriever
            self.retriever = EmbeddingRetriever(
                document_store=self.document_store,
                embedding_model=config.models.embedding_model,
                model_format="openai",
                api_key=config.openai_api_key,
                top_k=config.processing.top_k,
            )

            # Prompt template - Fixed syntax
            self.prompt_template = PromptTemplate(
                prompt="""
                B·∫°n l√† tr·ª£ l√Ω d·ªØ li·ªáu, ch·ªâ tr·∫£ l·ªùi d·ª±a tr√™n NG·ªÆ C·∫¢NH ƒë∆∞·ª£c cung c·∫•p.
                
                Ng·ªØ c·∫£nh: {join(documents)}
                C√¢u h·ªèi: {query}
                
                Tr·∫£ l·ªùi b·∫±ng ti·∫øng Vi·ªát, m·∫°ch l·∫°c v√† ch√≠nh x√°c. N·∫øu kh√¥ng t√¨m th·∫•y th√¥ng tin trong ng·ªØ c·∫£nh, h√£y n√≥i "T√¥i kh√¥ng t√¨m th·∫•y th√¥ng tin trong t√†i li·ªáu ƒë∆∞·ª£c cung c·∫•p."
                """,
                output_parser=None
            )

            # LLM
            self.llm = PromptNode(
                model_name_or_path=config.models.llm_model,
                api_key=config.openai_api_key,
                default_prompt_template=self.prompt_template,
                model_kwargs={"temperature": 0.1}
            )

            # Pipeline ƒë∆°n gi·∫£n
            self.pipeline = Pipeline()
            self.pipeline.add_node(component=self.retriever, name="Retriever", inputs=["Query"])
            self.pipeline.add_node(component=self.llm, name="LLM", inputs=["Retriever"])
            
            logger.info("‚úÖ Simple Haystack components initialized successfully")
        except Exception as e:
            logger.error(f"‚ùå Failed to initialize Simple Haystack: {e}")
            raise
    
    def add_documents(self, documents: List[Dict[str, Any]]) -> None:
        """Add documents ƒë∆°n gi·∫£n"""
        if not documents:
            logger.warning("‚ö†Ô∏è No documents to add")
            return
            
        haystack_docs = []
        
        for doc in documents:
            try:
                # Validate document structure
                if not isinstance(doc, dict) or "page_content" not in doc:
                    logger.warning(f"‚ö†Ô∏è Invalid document structure: {doc}")
                    continue
                
                # T·∫°o Document ƒë∆°n gi·∫£n, kh√¥ng d√πng pandas metadata
                haystack_doc = Document(
                    content=doc["page_content"],
                    meta={
                        "source_name": doc.get("metadata", {}).get("source_name", "Unknown"),
                        "page": doc.get("metadata", {}).get("page", 0),
                        "file_type": doc.get("metadata", {}).get("file_type", "unknown"),
                        "language": doc.get("metadata", {}).get("language", "vi")
                    }
                )
                haystack_docs.append(haystack_doc)
            except Exception as e:
                logger.error(f"‚ùå Error processing document: {e}")
                continue
        
        if haystack_docs:
            try:
                # Add to document store
                self.document_store.write_documents(haystack_docs)
                
                # Update embeddings
                self.retriever.update_embeddings(haystack_docs)
                
                logger.info(f"‚úÖ Added {len(haystack_docs)} documents to Simple Haystack")
            except Exception as e:
                logger.error(f"‚ùå Error writing documents to store: {e}")
                raise
        else:
            logger.warning("‚ö†Ô∏è No valid documents to add")
    
    def query(self, query: str) -> Dict[str, Any]:
        """Query ƒë∆°n gi·∫£n"""
        if not query or not query.strip():
            return {
                "answer": "Vui l√≤ng nh·∫≠p c√¢u h·ªèi.",
                "documents": [],
                "sources": [],
                "pipeline": "Simple Haystack",
            }
        
        try:
            result = self.pipeline.run(query=query)
            
            return {
                "answer": result["answers"][0].answer if result["answers"] else "Kh√¥ng t√¨m th·∫•y c√¢u tr·∫£ l·ªùi.",
                "documents": result["documents"],
                "sources": [doc.meta.get("source_name", "Unknown") for doc in result["documents"]],
                "pipeline": "Simple Haystack",
            }
        except Exception as e:
            logger.error(f"‚ùå Error in query: {e}")
            return {
                "answer": "C√≥ l·ªói x·∫£y ra khi x·ª≠ l√Ω c√¢u h·ªèi.",
                "documents": [],
                "sources": [],
                "pipeline": "Simple Haystack (Error)",
            }
    
    def get_document_count(self) -> int:
        """Get document count"""
        try:
            return self.document_store.get_document_count()
        except Exception as e:
            logger.error(f"‚ùå Error getting document count: {e}")
            return 0
    
    def get_pipeline_info(self) -> Dict[str, Any]:
        """Get pipeline information"""
        return {
            "document_count": self.get_document_count(),
            "pipeline_type": "Simple Haystack RAG Pipeline",
            "active_pipeline": "Haystack",
            "components": ["InMemoryDocumentStore", "EmbeddingRetriever", "PromptNode"],
            "features": ["Simple RAG", "OpenAI Embeddings", "OpenAI LLM"],
            "status": "Available" if HAYSTACK_AVAILABLE else "Not Available"
        }
    
    def clear_documents(self) -> None:
        """Clear all documents from the store"""
        try:
            # Reinitialize document store to clear all documents
            self._init_haystack()
            logger.info("‚úÖ Cleared all documents from Simple Haystack")
        except Exception as e:
            logger.error(f"‚ùå Error clearing documents: {e}")


def get_simple_haystack_pipeline():
    """Get Simple Haystack pipeline instance"""
    if HAYSTACK_AVAILABLE:
        return SimpleHaystackPipeline()
    else:
        raise ImportError("Haystack not available for Simple Haystack pipeline")
