"""
Haystack RAG Pipeline Service
"""

import logging
from typing import List, Dict, Any, Optional
import os

logger = logging.getLogger(__name__)

# Set environment variables for Haystack
os.environ['PYDANTIC_ARBITRARY_TYPES_ALLOWED'] = 'true'
os.environ['PYDANTIC_IGNORE_UNKNOWN'] = 'true'

try:
    from haystack import Document, Pipeline
    from haystack.nodes import EmbeddingRetriever, SentenceTransformersRanker, LostInTheMiddleRanker
    from haystack.nodes import PromptNode, PromptTemplate
    from haystack.document_stores import InMemoryDocumentStore
    
    HAYSTACK_AVAILABLE = True
    logger.info("‚úÖ Haystack RAG pipeline enabled")
except Exception as e:
    HAYSTACK_AVAILABLE = False
    logger.error(f"‚ùå Haystack RAG pipeline failed: {e}")

from config import config


class HaystackRAGPipeline:
    """Haystack-based RAG Pipeline"""
    
    def __init__(self):
        if not HAYSTACK_AVAILABLE:
            raise ImportError("Haystack not available")
        
        self._init_haystack()
        logger.info("üéØ Haystack RAG pipeline initialized")
    
    def _init_haystack(self):
        """Initialize Haystack components"""
        try:
            # Initialize document store
            self.document_store = InMemoryDocumentStore(
                embedding_dim=config.models.embedding_dimension,
                similarity="cosine"
            )
            
            # Initialize retriever
            self.retriever = EmbeddingRetriever(
                document_store=self.document_store,
                embedding_model=config.models.embedding_model,
                model_format="openai",
                api_key=config.openai_api_key,
                top_k=config.processing.top_k
            )
            
            # Rankers for better document selection
            self.similarity_ranker = SentenceTransformersRanker(
                model_name_or_path="cross-encoder/ms-marco-MiniLM-L-6-v2"
            )
            
            self.diversity_ranker = LostInTheMiddleRanker()
            
            # Prompt template
            self.prompt_template = PromptTemplate(
                prompt="""
                B·∫°n l√† tr·ª£ l√Ω d·ªØ li·ªáu, ch·ªâ tr·∫£ l·ªùi d·ª±a tr√™n NG·ªÆ C·∫¢NH ƒë∆∞·ª£c cung c·∫•p.
                Y√äU C·∫¶U NGHI√äM NG·∫∂T: Kh√¥ng suy ƒëo√°n, kh√¥ng d√πng ki·∫øn th·ª©c ngo√†i ng·ªØ c·∫£nh.
                
                H∆∞·ªõng d·∫´n tr·∫£ l·ªùi (b·∫±ng ti·∫øng Vi·ªát):
                - N·∫øu c√≥ s·ªë li·ªáu/b·∫£ng: tr√≠ch ƒë√∫ng s·ªë, k√®m ƒë∆°n v·ªã (v√≠ d·ª•: TWh, %, t·ª∑ l·ªá). Tr·∫£ l·ªùi ƒë·∫ßy ƒë·ªß, KH√îNG t√≥m t·∫Øt.
                - ∆Øu ti√™n s·ªë li·ªáu ƒë√∫ng NƒÇM/ƒê·ªäA ƒêI·ªÇM ƒë∆∞·ª£c h·ªèi; n·∫øu nhi·ªÅu m·ª•c (v√≠ d·ª• theo ng√†nh), li·ªát k√™ r√µ r√†ng.
                - N·∫øu c√≥ b·∫£ng ph√π h·ª£p: xu·∫•t l·∫°i b·∫£ng Markdown ƒë·∫ßy ƒë·ªß t·ª´ d·ªØ li·ªáu trong ng·ªØ c·∫£nh (kh√¥ng l∆∞·ª£c b·ªõt c·ªôt ch√≠nh).
                - N·∫øu ng·ªØ c·∫£nh kh√¥ng ƒë·ªß th√¥ng tin: tr·∫£ l·ªùi ƒë√∫ng c√¢u sau: 'Kh√¥ng t√¨m th·∫•y th√¥ng tin trong t√†i li·ªáu ƒë√£ cung c·∫•p.'
                
                [Ng·ªØ c·∫£nh]:
                {join(documents)}
                
                [C√¢u h·ªèi]: {query}
                
                Xu·∫•t tr·∫£ l·ªùi ·ªü d·∫°ng Markdown, c√≥ th·ªÉ bao g·ªìm b·∫£ng, bullet. ƒê·∫¶Y ƒê·ª¶ theo ng·ªØ c·∫£nh.
                """,
                output_parser=None
            )
            
            # LLM for generation
            self.prompt_node = PromptNode(
                model_name_or_path=config.models.llm_model,
                api_key=config.openai_api_key,
                default_prompt_template=self.prompt_template,
                model_kwargs={
                    "temperature": 0.2,
                    "max_tokens": 1200
                }
            )
            
            # Build pipeline
            self.pipeline = self._build_pipeline()
            
            logger.info("‚úÖ Haystack RAG components initialized successfully")
        except Exception as e:
            logger.error(f"‚ùå Failed to initialize Haystack RAG: {e}")
            raise
    
    def _build_pipeline(self) -> Pipeline:
        """Build Haystack RAG pipeline"""
        try:
            pipeline = Pipeline()
            
            # Add components
            pipeline.add_node(component=self.retriever, name="Retriever", inputs=["Query"])
            pipeline.add_node(component=self.similarity_ranker, name="SimilarityRanker", inputs=["Retriever"])
            pipeline.add_node(component=self.diversity_ranker, name="DiversityRanker", inputs=["SimilarityRanker"])
            pipeline.add_node(component=self.prompt_node, name="PromptNode", inputs=["DiversityRanker"])
            
            return pipeline
        except Exception as e:
            logger.error(f"‚ùå Failed to build pipeline: {e}")
            raise
    
    def add_documents(self, documents: List[Dict[str, Any]]) -> None:
        """Add documents to the pipeline"""
        if not documents:
            logger.warning("‚ö†Ô∏è No documents to add")
            return
            
        haystack_docs = []
        
        for doc in documents:
            try:
                # Validate document structure
                if not isinstance(doc, dict) or "page_content" not in doc:
                    logger.warning(f"‚ö†Ô∏è Invalid document structure: {doc}")
                    continue
                
                # Convert to Haystack Document
                if isinstance(doc, dict):
                    haystack_doc = Document(
                        content=doc["page_content"],
                        meta={
                            "source_name": doc.get("metadata", {}).get("source_name", "Unknown"),
                            "page": doc.get("metadata", {}).get("page", 0),
                            "file_type": doc.get("metadata", {}).get("file_type", "unknown"),
                            "language": doc.get("metadata", {}).get("language", "vi")
                        }
                    )
                else:
                    # Assume it's already a Haystack Document
                    haystack_doc = doc
                
                haystack_docs.append(haystack_doc)
            except Exception as e:
                logger.error(f"‚ùå Error processing document: {e}")
                continue
        
        if haystack_docs:
            try:
                # Add documents to document store
                self.document_store.write_documents(haystack_docs)
                
                # Update embeddings
                self.retriever.update_embeddings(haystack_docs)
                
                logger.info(f"‚úÖ Added {len(haystack_docs)} documents to Haystack RAG pipeline")
            except Exception as e:
                logger.error(f"‚ùå Error writing documents to store: {e}")
                raise
        else:
            logger.warning("‚ö†Ô∏è No valid documents to add")
    
    def query(self, query: str) -> Dict[str, Any]:
        """Query the RAG pipeline"""
        if not query or not query.strip():
            return {
                "answer": "Vui l√≤ng nh·∫≠p c√¢u h·ªèi.",
                "documents": [],
                "sources": [],
                "pipeline": "Haystack RAG",
            }
        
        try:
            # Run pipeline
            result = self.pipeline.run(query=query)
            
            return {
                "answer": result["answers"][0].answer if result["answers"] else "Kh√¥ng t√¨m th·∫•y c√¢u tr·∫£ l·ªùi.",
                "documents": result["documents"],
                "sources": [doc.meta.get("source_name", "Unknown") for doc in result["documents"]],
                "pipeline": "Haystack RAG",
            }
            
        except Exception as e:
            logger.error(f"‚ùå Error in RAG pipeline: {e}")
            return {
                "answer": "C√≥ l·ªói x·∫£y ra khi x·ª≠ l√Ω c√¢u h·ªèi.",
                "documents": [],
                "sources": [],
                "pipeline": "Haystack RAG (Error)",
            }
    
    def get_document_count(self) -> int:
        """Get number of documents in store"""
        try:
            return self.document_store.get_document_count()
        except Exception as e:
            logger.error(f"‚ùå Error getting document count: {e}")
            return 0
    
    def get_pipeline_info(self) -> Dict[str, Any]:
        """Get pipeline information"""
        return {
            "document_count": self.get_document_count(),
            "pipeline_type": "Haystack RAG Pipeline",
            "active_pipeline": "Haystack",
            "components": [
                "InMemoryDocumentStore", 
                "EmbeddingRetriever", 
                "SentenceTransformersRanker",
                "LostInTheMiddleRanker",
                "PromptNode"
            ],
            "features": [
                "Advanced RAG",
                "Document Ranking",
                "Diversity Ranking",
                "OpenAI Integration"
            ],
            "status": "Available" if HAYSTACK_AVAILABLE else "Not Available"
        }
    
    def clear_documents(self) -> None:
        """Clear all documents from the store"""
        try:
            # Reinitialize document store to clear all documents
            self._init_haystack()
            logger.info("‚úÖ Cleared all documents from Haystack RAG")
        except Exception as e:
            logger.error(f"‚ùå Error clearing documents: {e}")


# Global pipeline instance
rag_pipeline = HaystackRAGPipeline() if HAYSTACK_AVAILABLE else None
